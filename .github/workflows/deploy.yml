name: Deploy to Lightsail

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ vars.SERVER_HOST }}" >> ~/.ssh/known_hosts

      - name: Set release ID
        run: echo "RELEASE=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Create release dir on server
        run: |
          ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} \
            "mkdir -p ${{ vars.RELEASES_DIR }}/${{ env.RELEASE }}/"
            
      - name: Rsync files to server
        run: |
          rsync -az --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='var' \
            -e "ssh" ./ \
            ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }}:${{ vars.RELEASES_DIR }}/${{ env.RELEASE }}/

      - name: Verify layout
        run: |
          ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
            echo 'DEPLOY_PATH=${{ vars.DEPLOY_PATH }}'; \
            echo 'RELEASES_DIR=${{ vars.RELEASES_DIR }}'; \
            ls -ld ${{ vars.DEPLOY_PATH }} ${{ vars.DEPLOY_PATH }}/current || true; \
            ls -ld ${{ vars.RELEASES_DIR }} || true; \
            readlink -f ${{ vars.DEPLOY_PATH }}/current || true
          "
    
      - name: Link shared files/dirs and set secrets
        run: |
          ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
            mkdir -p ${{ vars.DEPLOY_PATH }}/code/shared/var && \
            ln -sfn ${{ vars.DEPLOY_PATH }}/code/shared/var ${{ vars.RELEASES_DIR }}/${{ env.RELEASE }}/code/var && \
            echo 'APP_SECRET=${{ secrets.HUMBLE_SECRET }}' > ${{ vars.RELEASES_DIR }}/${{ env.RELEASE }}/code/.env.local && \
            if [ -f ${{ vars.DEPLOY_PATH }}/.env.local ]; then
              ln -sfn ${{ vars.DEPLOY_PATH }}/.env.local ${{ vars.RELEASES_DIR }}/${{ env.RELEASE }}/code/.env.local
            fi
          "
          
      - name: Compose on server
        run: |
          ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
            cd ${{ vars.RELEASES_DIR }}/${{ env.RELEASE }} && \
            php -v && composer -V || true
          "
          ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
            cd ${{ vars.RELEASES_DIR }}/${{ env.RELEASE }}/code && \
            (command -v composer >/dev/null 2>&1 &&  APP_ENV=prod APP_DEBUG=0 composer install --no-dev --optimize-autoloader) || \
            APP_ENV=prod APP_DEBUG=0 php composer.phar install --no-dev --optimize-autoloader
            composer dump-env prod
          "

      - name: Composer update
        run: |
          ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
            cd ${{ vars.RELEASES_DIR }}/${{ env.RELEASE }} && \
            php -v && composer -V || true
          "
          ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
            cd ${{ vars.RELEASES_DIR }}/${{ env.RELEASE }}/code && \
            composer update
          "

      - name: Warm cache (prod)
        run: |
          ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
            cd ${{ vars.RELEASES_DIR }}/${{ env.RELEASE }}/code && \
            APP_ENV=prod APP_DEBUG=0 php bin/console cache:clear && \
            APP_ENV=prod APP_DEBUG=0 php bin/console cache:warmup
          "
      
      - name: Activate release and reload
        run: |
          ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} \
            "ln -sfn ${{ vars.RELEASES_DIR }}/${{ env.RELEASE }}/code ${{ vars.DEPLOY_PATH }}/current && sudo systemctl reload apache2"

      - name: Post-deploy health check
        run: |
          ssh -o StrictHostKeyChecking=no ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} << 'EOF'
            set -euo pipefail
            cd ${{ vars.RELEASES_DIR }}/${{ env.RELEASE }}/code
            php -v
            php -m | tr '\n' ' ' | fold -s
            php bin/console about --env=prod || true
            tail -n 200 var/log/apache2/humble-www_access.log || true
            # Return nonzero if we see a 500 on /
            status=$(curl -s -o /dev/null -w "%{http_code}" https://www.humblewizards.com/)
            echo "HTTP status: $status"
            test "$status" = "200"
          EOF
